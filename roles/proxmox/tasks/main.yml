---
# tasks file for proxmox

- name: "list nodes"
  tags: [ never, nodes ]
  block:
    
    - name: "get nodes"
      ansible.builtin.shell: pvecm status | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | awk '{print $3}'
      register: result

    - name: "nodes"
      set_fact:
        nodes: "{{ result['stdout_lines'] }}"

    #- name: "proxmox loop sur les noeuds"
    #  ansible.builtin.debug:
    #    msg: "{{ item }}"
    #  loop: '{{ nodes }}'
    
    - name: "proxmox : liste des noeuds"
      debug:
        msg: '{{ nodes }}'


# ---------------------------------------------------------------------- update ----------------------------------------------------------------------
- name: "update"
  tags: update
  when: "'nodes' not in group_names"
  block:

    - name: "current shell get os_codename"
      ansible.builtin.shell: cat /etc/os-release | grep -m 1 -E '^VERSION_CODENAME' | cut -d '=' -f 2
      register: result
    
    - name: "set current_os_codename"
      set_fact:
        current_os_codename: '{{ result.stdout }}'
        
    - name: "set os_codename if update only"
      set_fact:
        os_codename: '{{ current_os_codename }}'
      when:
        - upgrade is not defined or upgrade == ''
      
    - name: "proxmox : community"
      when: enterprise|bool == False
      block: 
            
        - name: "proxmox community : enterprise remove"
          ansible.builtin.file:
            path: /etc/apt/sources.list.d/pve-enterprise.sources
            state: absent

        - name: "proxmox community : community sources"
          ansible.builtin.template:
            src: 'templates/proxmox.sources.tpl'
            dest: '/etc/apt/sources.list.d/proxmox.sources'
            
        - name: "proxmox community : ceph"
          ansible.builtin.template:
            src: 'templates/ceph.sources.tpl'
            dest: '/etc/apt/sources.list.d/ceph.sources'
            
    - name: "proxmox : enterprise"
      when: enterprise|bool == True
      block: 
            
        - name: "proxmox enterprise : community remove"
          ansible.builtin.file:
            path: /etc/apt/sources.list.d/proxmox.sources
            state: absent
    
        - name: "proxmox enterprise : enterprise sources"
          ansible.builtin.template:
            src: 'templates/proxmox.sources.tpl'
            dest: '/etc/apt/sources.list.d/pve-enterprise.sources'

        - name: "proxmox enterprise : ceph"
          ansible.builtin.template:
            src: 'templates/ceph.sources.tpl'
            dest: '/etc/apt/sources.list.d/ceph.sources'

    - name: "apt : remove old sources"
      block:
      
        - name: "proxmox : remove old sources.d.list"
          ansible.builtin.file:
            path: /etc/apt/sources.list.d/{{ item }}
            state: absent
          loop: 
            - "pve-enterprise.list"
            - "pve-community.list"
            - "ceph.list"
            - "hwraid.le-vert.net.list"

        #- name: "proxmox : remove old hwraid.le-vert.net.list"
        #  ansible.builtin.file:
        #    path: /etc/apt/sources.list.d/hwraid.le-vert.net.list
        #    state: absent
        #  when: os_codename == 'trixie'

    - name: "proxmox : full-upgrade"
      apt:
        autoclean: true
        autoremove: false
        dpkg_options: "force-confdef,force-confold"
        force: false
        install_recommends: false
        state: latest
        update_cache: true
        upgrade: full
      #when:
      #  - upgrade is not defined or upgrade == ''
          
    - name: "proxmox UPGRADE / DIST-UPGRADE"
      when:
        - upgrade is defined
        - upgrade|bool == True
      block:
    
        - name: "proxmox : set sources to new distrib version"
          ansible.builtin.shell: "if [ -e /etc/apt/sources.list ] ; then sed -i 's/{{ os_previous }}/{{ os_codename }}/g' /etc/apt/sources.list ; fi"
          when:
            - 'os_previous|string != os_codename|string'
          ignore_errors: true
        
        - name: "proxmox : disable audit.socket"
          ansible.builtin.shell: systemctl disable --now systemd-journald-audit.socket
          ignore_errors: true
          
        - name: "proxmox : ceph osd set noout"
          ansible.builtin.shell: ceph osd set noout
          ignore_errors: true
          
        - name: "proxmox : dist-upgrade"
          apt:
            autoclean: true
            autoremove: false
            state: latest
            update_cache: true
            upgrade: dist
        
        - name: "proxmox : apt modernize-sources -y"
          ansible.builtin.shell: apt modernize-sources -y
        
        - name: "proxmox community : enterprise remove"
          ansible.builtin.file:
            path: /etc/apt/sources.list.d/pve-enterprise.sources
            state: absent
          when: enterprise|bool == False
              
        - name: "proxmox : ceph"
          apt:
            name: ceph
            state: latest
            update_cache: yes
            
        - name: "proxmox : ceph activate volume"
          ansible.builtin.shell: ceph-volume lvm activate --all
          ignore_errors: true

        - name: "proxmox : ceph telemetry license"
          ansible.builtin.shell: ceph telemetry on --license sharing-1-0
          ignore_errors: true
          
        - name: "proxmox : ceph telemetry enable"
          ansible.builtin.shell: ceph telemetry enable channel perf
          ignore_errors: true


# ---------------------------------------------------------------------- pre-reboot ----------------------------------------------------------------------
- name: "proxmox : pre-reboot"
  tags: pre_reboot
  block:
  
    - name: "proxmox : stop cron & monit"
      ansible.builtin.shell: "systemctl stop monit ; systemctl stop cron"
      ignore_errors: true
      
    - name: "proxmox : show vm id"
      ansible.builtin.shell: "find /etc/pve/qemu-server/ -type f -name '*.conf' | while read line ; do echo $(basename $line .conf) ; done"
      register: result
      
    - name: "proxmox : set vmids"
      set_fact:
        vmids: "{{ result['stdout_lines'] }}"
      
    - name: "proxmox : migrate : to"
      ansible.builtin.shell: "echo Migration de {{ item }} vers {{ qm_migrate_to }} ; qm migrate {{ item }} {{ qm_migrate_to }} --online"
      loop: '{{ vmids if vmids is iterable else [] }}'
      when: 
        - qm_migrate_to != "auto"
        - qm_migrate_to != "shutdown"
      
    - name: "proxmox : migrate : shutdown"
      ansible.builtin.shell: "echo Shutdown de {{ item }} ; if [ -e /etc/pve/roms/qm-shutdown-all.sh ] ; then bash /etc/pve/roms/qm-shutdown-all.sh {{ item }} ; fi ; qm shutdown {{ item }}"
      loop: '{{ vmids }}'
      when: 
        - qm_migrate_to == "shutdown"
    
    - name: "proxmox : migrate : auto"
      ansible.builtin.shell: "echo reboot will perform the necessary step"
      when: 
        - qm_migrate_to == "auto"
        
# ---------------------------------------------------------------------- reboot ----------------------------------------------------------------------
- name: "proxmox : reboot"
  tags: reboot
  block:
  
    - name: "proxmox : wait before reboot"
      ansible.builtin.shell: "ps aux | grep -v grep | grep /usr/bin/kvm"
      register: result
      failed_when: result.stdout != ""
      retries: 60
      delay: 10
      until: result is not failed
    
    - name: "proxmox : wait ceph is healthy (recovering)"
      #ansible.builtin.shell: "ceph -s | grep 'health:' | awk '{print $2}'"
      #ansible.builtin.shell: "ceph -s | grep 'undersized'"
      ansible.builtin.shell: "ceph -s | grep 'recovering'"
      register: result
      #failed_when: result.stdout != "HEALTH_OK"
      failed_when: result.stdout != ""
      changed_when: result.stdout == ""
      retries: 60
      delay: 10
      until: result is not failed
      
    - name: "proxmox : reboot"
      ansible.builtin.reboot:
        connect_timeout: 10
        pre_reboot_delay: 60
        post_reboot_delay: 120
        msg: "Reboot de la machine dans quelques secondes ..."
        #reboot_command: /bin/true


# ---------------------------------------------------------------------- post-reboot ----------------------------------------------------------------------
- name: "proxmox : post-reboot"
  tags: post_reboot
  block:

    - name: "proxmox community : enterprise remove"
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/pve-enterprise.sources
        state: absent
      when: enterprise|bool == False
          
    - name: "proxmox : full-upgrade after reboot"
      apt:
        autoclean: true
        autoremove: false
        dpkg_options: "force-confdef,force-confold"
        force: false
        install_recommends: false
        state: latest
        update_cache: true
        upgrade: full

    - name: "proxmox : wait ceph is healthy (undersized)"
      #ansible.builtin.shell: "ceph -s | grep 'health:' | awk '{print $2}'"
      ansible.builtin.shell: "ceph -s | grep 'undersized'"
      register: result
      failed_when: result.stdout != ""
      changed_when: result.stdout == ""
      retries: 60
      delay: 10
      until: result is not failed

    - name: "proxmox : ceph : check require_osd_release"
      ansible.builtin.shell: ceph -s | grep -E "all OSDs are running {{ ceph_codename }} or later but require_osd_release < .+" ; /bin/true
      register: result
      
    - name: "proxmox : ceph : set require_osd_release"
      ansible.builtin.shell: ceph osd require-osd-release {{ ceph_codename }}
      when: 
        - 'ceph_codename|string in result.stdout'

    - name: "proxmox : ceph osd unset noout"
      ansible.builtin.shell: ceph osd unset noout
      ignore_errors: true

